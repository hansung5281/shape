캡슐화

사용자는 코드의 내용을 모르더라고 프로그램을 사용할 수 있게 해준다. 
실제 구현 내용을 감춤으로써 외부 객체는 객체 내부의 구조를 알지 못 한다.
캡슐화를 하는 이유는 외부의 잘못된 접근으로인한 데이터 손상을 방지하기 위해서며,
접근지정자를 통해 외부에서 아무나 접근할 수 없도록 private등 으로 지정함으로써 
데이터를 보호한다.

예제는 패키지 ex1에 Point.java와 PointMain.java를 참고

----------------------------------------------------------------------------------------

상속

자바에서 상속은 생물학적으로 자식이 부모의 유전정보를 물려받는 것과 같다고 볼 수 있다. 
즉, 부모 클래스를 상속받는 자식클래스들은 부모의 특징을 모두 갖게 된다.


자바에서는 부모클래스를 슈퍼클래스, 자식클래스를 서브클래스라 부른다.
상속이 있음으로써 좋은 점은 우선, 클래스 사이의 멤버 중복 선언이 불필요하게 되고, 
메소드를 재사용함으로써 클래스가 견결해지고, 클래스 간 계층적 분류 및 관리가 용이해진다.


자바 상속의 특징으로는 첫 째, 다중상속을 지원하지 않고 
둘째, 상속의 횟수에 제한을 두지 않으며, 모든 계층의 최상위 클래스는 
java.lang.Object클래스이다.


상속관계에서 객체의 타입변환이 있는데 
서브클래스 객체->슈퍼클래스로 되는 업캐스팅은 자동 타입변환이 되며
슈퍼클래스->서브클래스로 되는 다운캐스티은 강제 타입변환이 필요하다.


*추상 클래스 & 추상 메소드
추상 메소드는 코드가 구현되어 있지 않은 껍데기 상태이며 abastract로 
선언된 메소드를 말하며, 추상클래스는 추상 메소드를 가지고 있거나 없거나 반드시 
abstract로 선언되어 있는 클래스를 말한다.
추상 클래스를 상속받은 클래스는 모든 추상 메소드를 구현해야 한다.
이런 추상클래스를 사용함으로써 기본 방향을 잡아놓고 서브 클래스를 
구현하기 때문에 구현작업이 쉬워진다는 장점이 있다.


*인터페이스
보통 인터페이스라하면 하드웨어 장치들이 상호 접속하여 데이터를 주고받을 수 있는 
규격을 의미한다.
자바에서 인터페이스 구현은 클래스명 앞에 interface를 사용하여 구현한다.
클래스들은 인터페이스를 상속받을 수 없고, 인터페이스끼리만 상속이 가능하다.
이때는 다중상속이 가능하다.
일반 클래스에서 인터페이스를 구현하기 위해서는 implements라는 키워드를 사용하여 
클래스를 작성한다. 인터페이스 구현은 다중 구현이 가능하여 콤마를 이용하여 
여러 인터페이스를 구현할 수 있다.


예제는 패키지 ex2에 Visible.java, Drawable.java, Shape.java, Circle.java, ShapeMain.java 참고
----------------------------------------------------------------------------------------


다형성

다형성은 하나의 메소드나 클래스들을 다양한 방법으로 동작하는 것을 의미하는 것이다.
이것의 예로는 자바에서 System.out.println()을 예로 들 수 있다. 
이 메소드는 파라메터값이 string, int, double등 다양한 경우에도 화면에 출력을 시켜준다.
다형성의 좋은 예라고 할 수 있다.

위에 예는 overloading의 좋은 예이기도 하다. 
Overloading은 동일한 클래스에서 동일한 이름의 메서드를 정의하는 것을 말하는데 
이때 파라미터의 타입이나 개수가 무조건 달라야만 한다. 
Overloading을 있음으로써 이 메소드를 사용하는 사람들은 같은 이름의 메소드를 사용해서
다양한 결과값을 얻을 수 있는 장점이 있다.

또한, 다형성에서 overiding이 있는데 이는 슈퍼 클래스의 메소드와 완전히 동일한 
메소드를 재정아하는 것을 말한다. 그런데 오버라이딩시 접근지정자는 슈퍼클래스의 
메소드보다 범위가 같거나 넓어야 한다.
이러한 오버라이딩을 사용함으로써 메소드를 자신의 특성에 맞게 새로 만들어 
사용하여 활용할 수 있다.
오버라이딩 된 메소드에서 super라는 키워드는 상위의 슈퍼클래스객체에 
대한 접근을 의미하고, this는 현재의 객체를 의미하게 된다.


예제는 패키지 ex3에 Person.java, Student.java, PersonMain.java 참고